# This is a basic workflow to help you get started with Actions

name: Powershell-Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2019
    
    environment: Dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            3.1.x
      #- run: Write-Host ${{ secrets.ENV_NAME }}
      #- run: ls "C:\Windows\Microsoft.NET\Framework64"
      #- run: dotnet restore .\MySFWebApp8.sln
      
      #- run: ./deploy/build_deploy.ps1

      # Runs a set of commands using the runners shell
      #- name: Install ServiceFabric Powershell Module
      #  run: |
      #      ./installmod.ps1
      #      ls $ENV:ProgramFiles\Microsoft SDK
                #Set-PSRepository PSGallery -InstallationPolicy Trusted
                #Install-Module -Name Az.ServiceFabric -RequiredVersion 1.0.0
                #Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
                #choco install MicrosoftAzure-ServiceFabric-CoreSDK --source webpi -y
                #dotnet add package Microsoft.ServiceFabric --version 9.0.1028
                #choco install service-fabric-sdk
                #New-Item .\installer -ItemType Directory
                #Invoke-WebRequest "https://www.microsoft.com/web/handlers/webpi.ashx?command=getinstallerredirect&appid=MicrosoftAzure-ServiceFabric-CoreSDK" -OutFile .\installer\ServiceFabricSDK.exe -UseBasicParsing; Start-Process -FilePath .\installer\ServiceFabricSDK.exe -ArgumentList '/i', '/passive', '/quiet', '/norestart', '/qn' -NoNewWindow -Wait;
                #ls .\installer
                
                #Connect-ServiceFabricCluster -ConnectionEndpoint mysfwebapp8.eastus.cloudapp.azure.com:19000 `
                #-KeepAliveIntervalInSec 10 `
                #-X509Credential -ServerCertThumbprint 6B5DA229ED923914B618D3B682EFD82447FC8D5F `
                #-FindType FindByThumbprint -FindValue 6B5DA229ED923914B618D3B682EFD82447FC8D5F `
                #-StoreLocation CurrentUser -StoreName My                
                                
        
      #- name: Build ServiceFabric Application
      #  run: dotnet build .\MySFWebApp8.sln
      
      #- name: Check VS
      #  run: ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin"
      
      - name: Package SFApplication
        run: ./deploy/Package.ps1
        
      - uses: actions/upload-artifact@master
        with:
          name: SF_Artifacts
          path: ./artifacts
          retention-period: 1
      
      #- name: Deploy ServiceFabric Application
      #  run: ./deploy/build_deploy.ps1
  deploy:
    runs-on: windows-2019
    needs: build
    steps:
      - name: Setup Artifacts folder
        run: New-Item .\artifacts -ItemType Directory
        
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: SF_Artifacts
          path: .\artifacts
      
      - name: Unzip artifacts
        run:  Expand-Archive -LiteralPath .\artifacts\sfartifact.Zip -DestinationPath .\artifacts -Force
      
      - name: Deploy Artifacts
        run: ls .\artifacts
